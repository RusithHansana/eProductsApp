package tech.eproducts.order_management_service.model;

// Lombok annotations for automatic generation of boilerplate code

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Represents an order entity in the system.
 * This class is mapped to the "orders" collection in MongoDB.
 */
@Document(collection = "orders") // Specifies the MongoDB collection name
@Data // Lombok annotation to generate getters, setters, and other utility methods
@AllArgsConstructor // Generates a constructor with all fields
@NoArgsConstructor // Generates a no-argument constructor
public class Order {

    @Id // Marks this field as the primary key in the MongoDB document
    private String id; // Unique identifier for the order

    // Reference to the User who placed the order (commented out for now)
    // @DBRef
    // private User user; // Assuming you have a User class

    @DBRef // Indicates that this field is a reference to another document (Product)
    private List<Product> products; // List of products included in the order

    private Double totalPrice; // Total price of the order
    private String status; // Status of the order (e.g., "Pending", "Shipped", "Delivered")

    @CreatedDate // Automatically populated with the current date when the order is created
    private LocalDateTime createdAt; // Timestamp for when the order was created

    @LastModifiedDate // Automatically updated with the current date when the order is modified
    private LocalDateTime updatedAt; // Timestamp for when the order was last updated

    // Constructors, getters, and setters are generated by Lombok annotations
}